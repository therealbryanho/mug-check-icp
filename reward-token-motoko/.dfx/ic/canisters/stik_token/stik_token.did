type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TxIndex = nat;
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Tokens;};
   BadFee: record {expected_fee: Tokens;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Tokens;};
   JustBad;
   TemporarilyUnavailable;
   TooOld;
 };
type Tokens = nat;
type Timestamp = nat64;
type Subaccount = blob;
type Memo = blob;
type Ledger = 
 service {
   icrc1_balance_of: (Account) -> (Tokens) query;
   icrc1_decimals: () -> (nat8) query;
   icrc1_fee: () -> (nat) query;
   icrc1_max_supply: () -> (nat) query;
   icrc1_metadata: () -> (vec record {
                                text;
                                Value;
                              }) query;
   icrc1_mint:
    (record {
       amount: Tokens;
       created_at_time: opt Timestamp;
       fee: opt Tokens;
       from_subaccount: opt Subaccount;
       memo: opt Memo;
       secret: text;
       to: Account;
     }) -> (TransferResult);
   icrc1_minting_account: () -> (opt Account) query;
   icrc1_name: () -> (text) query;
   icrc1_supported_standards: () ->
    (vec record {
           name: text;
           url: text;
         }) query;
   icrc1_symbol: () -> (text) query;
   icrc1_total_supply: () -> (Tokens) query;
   icrc1_transfer:
    (record {
       amount: Tokens;
       created_at_time: opt Timestamp;
       fee: opt Tokens;
       from_subaccount: opt Subaccount;
       memo: opt Memo;
       to: Account;
     }) -> (TransferResult);
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (record {
             decimals: nat8;
             initial_mints:
              vec
               record {
                 account: record {
                            owner: principal;
                            subaccount: opt blob;
                          };
                 amount: nat;
               };
             minting_account: record {
                                owner: principal;
                                subaccount: opt blob;
                              };
             token_name: text;
             token_symbol: text;
             transfer_fee: nat;
           }) -> Ledger
